# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AnonymizeUser {
  businessId: ID!
  userId: ID!
}

input BatchUserEmail {
  emails: [String!]!
  message: String!
  subject: String!
}

type Benefit {
  business: Business!
  created: DateTime!
  description: String!
  expiryDate: DateTime
  id: ID!
  membershipType: MembershipType
  name: String!
  points: Float!
  updated: DateTime!
}

type BenefitConnection {
  """Array of nodes."""
  nodes: [Benefit!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

input BenefitDeleteFilter {
  and: [BenefitDeleteFilter!]
  businessId: StringFieldComparison
  created: DateFieldComparison
  expiryDate: DateFieldComparison
  id: IDFilterComparison
  membershipTypeId: StringFieldComparison
  name: StringFieldComparison
  or: [BenefitDeleteFilter!]
  points: NumberFieldComparison
  updated: DateFieldComparison
}

type BenefitDeleteResponse {
  created: DateTime
  description: String
  expiryDate: DateTime
  id: ID
  name: String
  points: Float
  updated: DateTime
}

input BenefitFilter {
  and: [BenefitFilter!]
  business: BenefitFilterBusinessFilter
  businessId: StringFieldComparison
  created: DateFieldComparison
  expiryDate: DateFieldComparison
  id: IDFilterComparison
  membershipType: BenefitFilterMembershipTypeFilter
  membershipTypeId: StringFieldComparison
  name: StringFieldComparison
  or: [BenefitFilter!]
  points: NumberFieldComparison
  updated: DateFieldComparison
}

input BenefitFilterBusinessFilter {
  and: [BenefitFilterBusinessFilter!]
  created: DateFieldComparison
  currency: CurrencyFilterComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [BenefitFilterBusinessFilter!]
  updated: DateFieldComparison
}

input BenefitFilterMembershipTypeFilter {
  and: [BenefitFilterMembershipTypeFilter!]
  created: DateFieldComparison
  description: StringFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [BenefitFilterMembershipTypeFilter!]
  pointsPerTicket: NumberFieldComparison
  price: NumberFieldComparison
  updated: DateFieldComparison
}

input BenefitSort {
  direction: SortDirection!
  field: BenefitSortFields!
  nulls: SortNulls
}

enum BenefitSortFields {
  businessId
  created
  expiryDate
  id
  membershipTypeId
  name
  points
  updated
}

input BenefitSubscriptionFilter {
  and: [BenefitSubscriptionFilter!]
  businessId: StringFieldComparison
  created: DateFieldComparison
  expiryDate: DateFieldComparison
  id: IDFilterComparison
  membershipTypeId: StringFieldComparison
  name: StringFieldComparison
  or: [BenefitSubscriptionFilter!]
  points: NumberFieldComparison
  updated: DateFieldComparison
}

input BenefitUpdateFilter {
  and: [BenefitUpdateFilter!]
  businessId: StringFieldComparison
  created: DateFieldComparison
  expiryDate: DateFieldComparison
  id: IDFilterComparison
  membershipTypeId: StringFieldComparison
  name: StringFieldComparison
  or: [BenefitUpdateFilter!]
  points: NumberFieldComparison
  updated: DateFieldComparison
}

input BooleanFieldComparison {
  is: Boolean
  isNot: Boolean
}

type Business {
  apiKey: String!
  created: DateTime!
  currency: Currency!
  id: ID!
  logoUrl: String
  name: String!
  updated: DateTime!
}

type BusinessConnection {
  """Array of nodes."""
  nodes: [Business!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

input BusinessDeleteFilter {
  and: [BusinessDeleteFilter!]
  created: DateFieldComparison
  currency: CurrencyFilterComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [BusinessDeleteFilter!]
  updated: DateFieldComparison
}

type BusinessDeleteResponse {
  apiKey: String
  created: DateTime
  currency: Currency
  id: ID
  logoUrl: String
  name: String
  updated: DateTime
}

input BusinessFilter {
  and: [BusinessFilter!]
  created: DateFieldComparison
  currency: CurrencyFilterComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [BusinessFilter!]
  updated: DateFieldComparison
}

type BusinessMetrics {
  customers: [Float!]!
  events: [Float!]!
  memberships: [Float!]!
  tickets: [Float!]!
}

input BusinessSort {
  direction: SortDirection!
  field: BusinessSortFields!
  nulls: SortNulls
}

enum BusinessSortFields {
  created
  currency
  id
  name
  updated
}

input BusinessSubscriptionFilter {
  and: [BusinessSubscriptionFilter!]
  created: DateFieldComparison
  currency: CurrencyFilterComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [BusinessSubscriptionFilter!]
  updated: DateFieldComparison
}

input BusinessUpdateFilter {
  and: [BusinessUpdateFilter!]
  created: DateFieldComparison
  currency: CurrencyFilterComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [BusinessUpdateFilter!]
  updated: DateFieldComparison
}

type BusinessUser {
  business: Business!
  created: DateTime!
  role: Role!
  updated: DateTime!
  user: User!
}

type BusinessUserConnection {
  """Array of nodes."""
  nodes: [BusinessUser!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

input BusinessUserDeleteFilter {
  and: [BusinessUserDeleteFilter!]
  businessId: StringFieldComparison
  created: DateFieldComparison
  or: [BusinessUserDeleteFilter!]
  role: RoleFilterComparison
  updated: DateFieldComparison
  userId: StringFieldComparison
}

type BusinessUserDeleteResponse {
  created: DateTime
  role: Role
  updated: DateTime
}

input BusinessUserFilter {
  and: [BusinessUserFilter!]
  business: BusinessUserFilterBusinessFilter
  businessId: StringFieldComparison
  created: DateFieldComparison
  or: [BusinessUserFilter!]
  role: RoleFilterComparison
  updated: DateFieldComparison
  user: BusinessUserFilterUserFilter
  userId: StringFieldComparison
}

input BusinessUserFilterBusinessFilter {
  and: [BusinessUserFilterBusinessFilter!]
  created: DateFieldComparison
  currency: CurrencyFilterComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [BusinessUserFilterBusinessFilter!]
  updated: DateFieldComparison
}

input BusinessUserFilterUserFilter {
  and: [BusinessUserFilterUserFilter!]
  avatarUrl: StringFieldComparison
  birthDate: DateFieldComparison
  created: DateFieldComparison
  defaultBusinessId: StringFieldComparison
  deleted: DateFieldComparison
  email: StringFieldComparison
  firstName: StringFieldComparison
  id: IDFilterComparison
  lastName: StringFieldComparison
  or: [BusinessUserFilterUserFilter!]
  placeOfResidence: StringFieldComparison
  updated: DateFieldComparison
}

input BusinessUserSort {
  direction: SortDirection!
  field: BusinessUserSortFields!
  nulls: SortNulls
}

enum BusinessUserSortFields {
  businessId
  created
  role
  updated
  userId
}

input BusinessUserSubscriptionFilter {
  and: [BusinessUserSubscriptionFilter!]
  businessId: StringFieldComparison
  created: DateFieldComparison
  or: [BusinessUserSubscriptionFilter!]
  role: RoleFilterComparison
  updated: DateFieldComparison
  userId: StringFieldComparison
}

input BusinessUserUpdateFilter {
  and: [BusinessUserUpdateFilter!]
  businessId: StringFieldComparison
  created: DateFieldComparison
  or: [BusinessUserUpdateFilter!]
  role: RoleFilterComparison
  updated: DateFieldComparison
  userId: StringFieldComparison
}

enum Category {
  Concert
  Dance
  Exhibition
  Festival
  Movie
  Performance
  Quiz
  Talk
  Theater
  Workshop
}

input CategoryFilterComparison {
  eq: Category
  gt: Category
  gte: Category
  iLike: Category
  in: [Category!]
  is: Boolean
  isNot: Boolean
  like: Category
  lt: Category
  lte: Category
  neq: Category
  notILike: Category
  notIn: [Category!]
  notLike: Category
}

input CreateBenefit {
  businessId: ID!
  description: String!
  expiryDate: DateTime
  membershipTypeId: ID
  name: String!
  points: Float!
}

input CreateBenefitSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: BenefitSubscriptionFilter!
}

input CreateBusiness {
  currency: Currency!
  logoUrl: String
  name: String!
  userId: ID!
}

input CreateBusinessSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: BusinessSubscriptionFilter!
}

input CreateBusinessUser {
  businessId: ID!
  role: Role! = Customer
  userId: ID!
}

input CreateBusinessUserSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: BusinessUserSubscriptionFilter!
}

input CreateDiscount {
  businessId: ID!
  name: String!
  percentage: Float!
}

input CreateDiscountSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: DiscountSubscriptionFilter!
}

input CreateEvent {
  businessId: ID!
  date: DateTime!
  name: String!
  templateId: ID!
}

input CreateEventSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: EventSubscriptionFilter!
}

input CreateManyBenefitsInput {
  """Array of records to create"""
  benefits: [CreateBenefit!]!
}

input CreateManyBusinessUsersInput {
  """Array of records to create"""
  businessUsers: [CreateBusinessUser!]!
}

input CreateManyBusinessesInput {
  """Array of records to create"""
  businesses: [CreateBusiness!]!
}

input CreateManyDiscountsInput {
  """Array of records to create"""
  discounts: [CreateDiscount!]!
}

input CreateManyEventsInput {
  """Array of records to create"""
  events: [CreateEvent!]!
}

input CreateManyMembershipTypesInput {
  """Array of records to create"""
  membershipTypes: [CreateMembershipType!]!
}

input CreateManyMembershipsInput {
  """Array of records to create"""
  memberships: [CreateMembership!]!
}

input CreateManyOrdersInput {
  """Array of records to create"""
  orders: [CreateOrder!]!
}

input CreateManyPriceCategoriesInput {
  """Array of records to create"""
  priceCategories: [CreatePriceCategory!]!
}

input CreateManyRowsInput {
  """Array of records to create"""
  rows: [CreateRow!]!
}

input CreateManySeatsInput {
  """Array of records to create"""
  seats: [CreateSeat!]!
}

input CreateManySectionsInput {
  """Array of records to create"""
  sections: [CreateSection!]!
}

input CreateManyTemplateDiscountsInput {
  """Array of records to create"""
  templateDiscounts: [CreateTemplateDiscount!]!
}

input CreateManyTemplatesInput {
  """Array of records to create"""
  templates: [CreateTemplate!]!
}

input CreateManyTicketsInput {
  """Array of records to create"""
  tickets: [CreateTicket!]!
}

input CreateManyUserBenefitsInput {
  """Array of records to create"""
  userBenefits: [CreateUserBenefit!]!
}

input CreateManyUsersInput {
  """Array of records to create"""
  users: [CreateUser!]!
}

input CreateManyVenuesInput {
  """Array of records to create"""
  venues: [CreateVenue!]!
}

input CreateMembership {
  businessId: ID!
  expiryDate: DateTime
  membershipTypeId: ID!
  points: Float
  userId: ID!
}

input CreateMembershipSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: MembershipSubscriptionFilter!
}

input CreateMembershipType {
  businessId: ID!
  description: String
  name: String!
  pointsPerTicket: Float
  price: Float
}

input CreateMembershipTypeSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: MembershipTypeSubscriptionFilter!
}

input CreateOneBenefitInput {
  """The record to create"""
  benefit: CreateBenefit!
}

input CreateOneBusinessInput {
  """The record to create"""
  business: CreateBusiness!
}

input CreateOneBusinessUserInput {
  """The record to create"""
  businessUser: CreateBusinessUser!
}

input CreateOneDiscountInput {
  """The record to create"""
  discount: CreateDiscount!
}

input CreateOneEventInput {
  """The record to create"""
  event: CreateEvent!
}

input CreateOneMembershipInput {
  """The record to create"""
  membership: CreateMembership!
}

input CreateOneMembershipTypeInput {
  """The record to create"""
  membershipType: CreateMembershipType!
}

input CreateOneOrderInput {
  """The record to create"""
  order: CreateOrder!
}

input CreateOnePriceCategoryInput {
  """The record to create"""
  priceCategory: CreatePriceCategory!
}

input CreateOneRowInput {
  """The record to create"""
  row: CreateRow!
}

input CreateOneSeatInput {
  """The record to create"""
  seat: CreateSeat!
}

input CreateOneSectionInput {
  """The record to create"""
  section: CreateSection!
}

input CreateOneTemplateDiscountInput {
  """The record to create"""
  templateDiscount: CreateTemplateDiscount!
}

input CreateOneTemplateInput {
  """The record to create"""
  template: CreateTemplate!
}

input CreateOneTicketInput {
  """The record to create"""
  ticket: CreateTicket!
}

input CreateOneUserBenefitInput {
  """The record to create"""
  userBenefit: CreateUserBenefit!
}

input CreateOneUserInput {
  """The record to create"""
  user: CreateUser!
}

input CreateOneVenueInput {
  """The record to create"""
  venue: CreateVenue!
}

input CreateOrder {
  businessId: ID!
  total: Float!
  userId: ID
}

input CreateOrderSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: OrderSubscriptionFilter!
}

input CreatePriceCategory {
  endDate: DateTime
  name: String!
  price: Float!
  sectionId: ID!
  startDate: DateTime
  templateId: ID!
}

input CreatePriceCategoryInput {
  endDate: DateTime
  name: String!
  price: Float!
  sectionId: ID!
  startDate: DateTime
}

input CreatePriceCategorySubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: PriceCategorySubscriptionFilter!
}

input CreateRow {
  name: String!
  sectionId: String!
}

input CreateRowSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: RowSubscriptionFilter!
}

input CreateSeat {
  name: String!
  sectionId: String!
}

input CreateSeatSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: SeatSubscriptionFilter!
}

input CreateSection {
  capacity: Float
  name: String!
  venueId: ID!
}

input CreateSectionSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: SectionSubscriptionFilter!
}

input CreateTemplate {
  businessId: ID!
  category: Category!
  description: String
  discount: [String!]
  language: Language
  length: Float
  name: String!
  posterUrl: String
  priceCategory: [CreatePriceCategoryInput!]!
  subtitles: Language
  type: Type!
  venueId: ID!
}

input CreateTemplateDiscount {
  discountId: ID!
  templateId: ID!
}

input CreateTemplateDiscountSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: TemplateDiscountSubscriptionFilter!
}

input CreateTemplateSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: TemplateSubscriptionFilter!
}

input CreateTicket {
  businessId: ID!
  discountId: ID
  eventId: ID!
  price: Float!
  rowId: ID
  seatId: ID
  sectionId: ID!
  userId: ID
  validated: DateTime
}

input CreateTicketExtra {
  businessId: ID!
  discount: String
  discountId: ID
  eventId: ID!
  price: Float!
  row: String
  rowId: ID
  seat: Float
  seatId: ID
  section: String!
  sectionId: ID!
  userId: ID
  validated: DateTime
}

input CreateTicketOrder {
  order: CreateOrder!
  tickets: [CreateTicketExtra!]!
}

input CreateTicketSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: TicketSubscriptionFilter!
}

input CreateUser {
  birthDate: DateTime!
  email: String!
  firstName: String!
  lastName: String!
  placeOfResidence: String
}

input CreateUserBenefit {
  benefitId: ID!
  businessId: ID!
  userId: ID!
}

input CreateUserBenefitSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: UserBenefitSubscriptionFilter!
}

input CreateUserSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: UserSubscriptionFilter!
}

input CreateVenue {
  buildingNumber: String!
  businessId: ID!
  capacity: Float!
  city: String!
  hasSeats: Boolean!
  name: String!
  seatMap: JSON
  sections: [VenueSection!]
  street: String!
}

input CreateVenueSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: VenueSubscriptionFilter!
}

enum Currency {
  CZK
  EUR
  USD
}

input CurrencyFilterComparison {
  eq: Currency
  gt: Currency
  gte: Currency
  iLike: Currency
  in: [Currency!]
  is: Boolean
  isNot: Boolean
  like: Currency
  lt: Currency
  lte: Currency
  neq: Currency
  notILike: Currency
  notIn: [Currency!]
  notLike: Currency
}

input DateFieldComparison {
  between: DateFieldComparisonBetween
  eq: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  is: Boolean
  isNot: Boolean
  lt: DateTime
  lte: DateTime
  neq: DateTime
  notBetween: DateFieldComparisonBetween
  notIn: [DateTime!]
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteManyBenefitsInput {
  """Filter to find records to delete"""
  filter: BenefitDeleteFilter!
}

input DeleteManyBusinessUsersInput {
  """Filter to find records to delete"""
  filter: BusinessUserDeleteFilter!
}

input DeleteManyBusinessesInput {
  """Filter to find records to delete"""
  filter: BusinessDeleteFilter!
}

input DeleteManyDiscountsInput {
  """Filter to find records to delete"""
  filter: DiscountDeleteFilter!
}

input DeleteManyEventsInput {
  """Filter to find records to delete"""
  filter: EventDeleteFilter!
}

input DeleteManyMembershipTypesInput {
  """Filter to find records to delete"""
  filter: MembershipTypeDeleteFilter!
}

input DeleteManyMembershipsInput {
  """Filter to find records to delete"""
  filter: MembershipDeleteFilter!
}

input DeleteManyOrdersInput {
  """Filter to find records to delete"""
  filter: OrderDeleteFilter!
}

input DeleteManyPriceCategoriesInput {
  """Filter to find records to delete"""
  filter: PriceCategoryDeleteFilter!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

input DeleteManyRowsInput {
  """Filter to find records to delete"""
  filter: RowDeleteFilter!
}

input DeleteManySeatsInput {
  """Filter to find records to delete"""
  filter: SeatDeleteFilter!
}

input DeleteManySectionsInput {
  """Filter to find records to delete"""
  filter: SectionDeleteFilter!
}

input DeleteManyTemplateDiscountsInput {
  """Filter to find records to delete"""
  filter: TemplateDiscountDeleteFilter!
}

input DeleteManyTemplatesInput {
  """Filter to find records to delete"""
  filter: TemplateDeleteFilter!
}

input DeleteManyTicketsInput {
  """Filter to find records to delete"""
  filter: TicketDeleteFilter!
}

input DeleteManyUserBenefitsInput {
  """Filter to find records to delete"""
  filter: UserBenefitDeleteFilter!
}

input DeleteManyUsersInput {
  """Filter to find records to delete"""
  filter: UserDeleteFilter!
}

input DeleteManyVenuesInput {
  """Filter to find records to delete"""
  filter: VenueDeleteFilter!
}

input DeleteOneBenefitInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneBenefitSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: BenefitSubscriptionFilter!
}

input DeleteOneBusinessInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneBusinessSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: BusinessSubscriptionFilter!
}

input DeleteOneBusinessUserInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneBusinessUserSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: BusinessUserSubscriptionFilter!
}

input DeleteOneDiscountInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneDiscountSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: DiscountSubscriptionFilter!
}

input DeleteOneEventInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneEventSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: EventSubscriptionFilter!
}

input DeleteOneMembershipInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneMembershipSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: MembershipSubscriptionFilter!
}

input DeleteOneMembershipTypeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneMembershipTypeSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: MembershipTypeSubscriptionFilter!
}

input DeleteOneOrderInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneOrderSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: OrderSubscriptionFilter!
}

input DeleteOnePriceCategoryInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOnePriceCategorySubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: PriceCategorySubscriptionFilter!
}

input DeleteOneRowInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneRowSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: RowSubscriptionFilter!
}

input DeleteOneSeatInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneSeatSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: SeatSubscriptionFilter!
}

input DeleteOneSectionInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneSectionSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: SectionSubscriptionFilter!
}

input DeleteOneTemplateDiscountInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneTemplateDiscountSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: TemplateDiscountSubscriptionFilter!
}

input DeleteOneTemplateInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneTemplateSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: TemplateSubscriptionFilter!
}

input DeleteOneTicketInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneTicketSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: TicketSubscriptionFilter!
}

input DeleteOneUserBenefitInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneUserBenefitSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: UserBenefitSubscriptionFilter!
}

input DeleteOneUserInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneUserSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: UserSubscriptionFilter!
}

input DeleteOneVenueInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneVenueSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: VenueSubscriptionFilter!
}

type Discount {
  business: Business!
  created: DateTime!
  id: ID!
  name: String!
  percentage: Float!
  updated: DateTime!
}

type DiscountConnection {
  """Array of nodes."""
  nodes: [Discount!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

input DiscountDeleteFilter {
  and: [DiscountDeleteFilter!]
  businessId: StringFieldComparison
  created: DateFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [DiscountDeleteFilter!]
  percentage: NumberFieldComparison
  updated: DateFieldComparison
}

type DiscountDeleteResponse {
  created: DateTime
  id: ID
  name: String
  percentage: Float
  updated: DateTime
}

input DiscountFilter {
  and: [DiscountFilter!]
  business: DiscountFilterBusinessFilter
  businessId: StringFieldComparison
  created: DateFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [DiscountFilter!]
  percentage: NumberFieldComparison
  updated: DateFieldComparison
}

input DiscountFilterBusinessFilter {
  and: [DiscountFilterBusinessFilter!]
  created: DateFieldComparison
  currency: CurrencyFilterComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [DiscountFilterBusinessFilter!]
  updated: DateFieldComparison
}

input DiscountSort {
  direction: SortDirection!
  field: DiscountSortFields!
  nulls: SortNulls
}

enum DiscountSortFields {
  businessId
  created
  id
  name
  percentage
  updated
}

input DiscountSubscriptionFilter {
  and: [DiscountSubscriptionFilter!]
  businessId: StringFieldComparison
  created: DateFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [DiscountSubscriptionFilter!]
  percentage: NumberFieldComparison
  updated: DateFieldComparison
}

input DiscountUpdateFilter {
  and: [DiscountUpdateFilter!]
  businessId: StringFieldComparison
  created: DateFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [DiscountUpdateFilter!]
  percentage: NumberFieldComparison
  updated: DateFieldComparison
}

type Event {
  business: Business!
  created: DateTime!
  date: DateTime!
  id: ID!
  name: String!
  seatMap: JSON
  template: Template!
  updated: DateTime!
}

type EventCheckoutDto {
  discounts: [Discount!]
  events: [Event!]!
  priceCategories: PriceCategoryAvailable
  tickets: [Ticket!]
  users: [User!]!
}

type EventConnection {
  """Array of nodes."""
  nodes: [Event!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

input EventDeleteFilter {
  and: [EventDeleteFilter!]
  businessId: StringFieldComparison
  created: DateFieldComparison
  date: DateFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [EventDeleteFilter!]
  templateId: StringFieldComparison
  updated: DateFieldComparison
}

type EventDeleteResponse {
  created: DateTime
  date: DateTime
  id: ID
  name: String
  seatMap: JSON
  updated: DateTime
}

input EventFilter {
  and: [EventFilter!]
  business: EventFilterBusinessFilter
  businessId: StringFieldComparison
  created: DateFieldComparison
  date: DateFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [EventFilter!]
  template: EventFilterTemplateFilter
  templateId: StringFieldComparison
  updated: DateFieldComparison
}

input EventFilterBusinessFilter {
  and: [EventFilterBusinessFilter!]
  created: DateFieldComparison
  currency: CurrencyFilterComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [EventFilterBusinessFilter!]
  updated: DateFieldComparison
}

input EventFilterTemplateFilter {
  and: [EventFilterTemplateFilter!]
  category: CategoryFilterComparison
  created: DateFieldComparison
  description: StringFieldComparison
  id: IDFilterComparison
  language: LanguageFilterComparison
  length: NumberFieldComparison
  name: StringFieldComparison
  or: [EventFilterTemplateFilter!]
  subtitles: LanguageFilterComparison
  type: TypeFilterComparison
  updated: DateFieldComparison
  venueId: StringFieldComparison
}

input EventSort {
  direction: SortDirection!
  field: EventSortFields!
  nulls: SortNulls
}

enum EventSortFields {
  businessId
  created
  date
  id
  name
  templateId
  updated
}

input EventSubscriptionFilter {
  and: [EventSubscriptionFilter!]
  businessId: StringFieldComparison
  created: DateFieldComparison
  date: DateFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [EventSubscriptionFilter!]
  templateId: StringFieldComparison
  updated: DateFieldComparison
}

input EventUpdateFilter {
  and: [EventUpdateFilter!]
  businessId: StringFieldComparison
  created: DateFieldComparison
  date: DateFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [EventUpdateFilter!]
  templateId: StringFieldComparison
  updated: DateFieldComparison
}

"""Group by"""
enum GroupBy {
  DAY
  MONTH
  WEEK
  YEAR
}

input IDFilterComparison {
  eq: ID
  gt: ID
  gte: ID
  iLike: ID
  in: [ID!]
  is: Boolean
  isNot: Boolean
  like: ID
  lt: ID
  lte: ID
  neq: ID
  notILike: ID
  notIn: [ID!]
  notLike: ID
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

enum Language {
  Arabic
  Czech
  English
  French
  German
  Japanese
  Mandarin
  Portuguese
  Russian
  Slovak
  Spanish
}

input LanguageFilterComparison {
  eq: Language
  gt: Language
  gte: Language
  iLike: Language
  in: [Language!]
  is: Boolean
  isNot: Boolean
  like: Language
  lt: Language
  lte: Language
  neq: Language
  notILike: Language
  notIn: [Language!]
  notLike: Language
}

type Membership {
  business: Business!
  created: DateTime!
  expiryDate: DateTime!
  id: ID!
  membershipType: MembershipType!
  points: Float!
  updated: DateTime!
  user: User!
}

type MembershipConnection {
  """Array of nodes."""
  nodes: [Membership!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

input MembershipDeleteFilter {
  and: [MembershipDeleteFilter!]
  businessId: StringFieldComparison
  created: DateFieldComparison
  expiryDate: DateFieldComparison
  id: IDFilterComparison
  membershipTypeId: StringFieldComparison
  or: [MembershipDeleteFilter!]
  points: NumberFieldComparison
  updated: DateFieldComparison
  userId: StringFieldComparison
}

type MembershipDeleteResponse {
  created: DateTime
  expiryDate: DateTime
  id: ID
  points: Float
  updated: DateTime
}

input MembershipFilter {
  and: [MembershipFilter!]
  business: MembershipFilterBusinessFilter
  businessId: StringFieldComparison
  created: DateFieldComparison
  expiryDate: DateFieldComparison
  id: IDFilterComparison
  membershipType: MembershipFilterMembershipTypeFilter
  membershipTypeId: StringFieldComparison
  or: [MembershipFilter!]
  points: NumberFieldComparison
  updated: DateFieldComparison
  user: MembershipFilterUserFilter
  userId: StringFieldComparison
}

input MembershipFilterBusinessFilter {
  and: [MembershipFilterBusinessFilter!]
  created: DateFieldComparison
  currency: CurrencyFilterComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [MembershipFilterBusinessFilter!]
  updated: DateFieldComparison
}

input MembershipFilterMembershipTypeFilter {
  and: [MembershipFilterMembershipTypeFilter!]
  created: DateFieldComparison
  description: StringFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [MembershipFilterMembershipTypeFilter!]
  pointsPerTicket: NumberFieldComparison
  price: NumberFieldComparison
  updated: DateFieldComparison
}

input MembershipFilterUserFilter {
  and: [MembershipFilterUserFilter!]
  avatarUrl: StringFieldComparison
  birthDate: DateFieldComparison
  created: DateFieldComparison
  defaultBusinessId: StringFieldComparison
  deleted: DateFieldComparison
  email: StringFieldComparison
  firstName: StringFieldComparison
  id: IDFilterComparison
  lastName: StringFieldComparison
  or: [MembershipFilterUserFilter!]
  placeOfResidence: StringFieldComparison
  updated: DateFieldComparison
}

input MembershipSort {
  direction: SortDirection!
  field: MembershipSortFields!
  nulls: SortNulls
}

enum MembershipSortFields {
  businessId
  created
  expiryDate
  id
  membershipTypeId
  points
  updated
  userId
}

input MembershipSubscriptionFilter {
  and: [MembershipSubscriptionFilter!]
  businessId: StringFieldComparison
  created: DateFieldComparison
  expiryDate: DateFieldComparison
  id: IDFilterComparison
  membershipTypeId: StringFieldComparison
  or: [MembershipSubscriptionFilter!]
  points: NumberFieldComparison
  updated: DateFieldComparison
  userId: StringFieldComparison
}

type MembershipType {
  business: Business!
  created: DateTime!
  description: String
  id: ID!
  name: String!
  pointsPerTicket: Float
  price: Float
  updated: DateTime!
}

type MembershipTypeConnection {
  """Array of nodes."""
  nodes: [MembershipType!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

input MembershipTypeDeleteFilter {
  and: [MembershipTypeDeleteFilter!]
  created: DateFieldComparison
  description: StringFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [MembershipTypeDeleteFilter!]
  pointsPerTicket: NumberFieldComparison
  price: NumberFieldComparison
  updated: DateFieldComparison
}

type MembershipTypeDeleteResponse {
  created: DateTime
  description: String
  id: ID
  name: String
  pointsPerTicket: Float
  price: Float
  updated: DateTime
}

input MembershipTypeFilter {
  and: [MembershipTypeFilter!]
  business: MembershipTypeFilterBusinessFilter
  created: DateFieldComparison
  description: StringFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [MembershipTypeFilter!]
  pointsPerTicket: NumberFieldComparison
  price: NumberFieldComparison
  updated: DateFieldComparison
}

input MembershipTypeFilterBusinessFilter {
  and: [MembershipTypeFilterBusinessFilter!]
  created: DateFieldComparison
  currency: CurrencyFilterComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [MembershipTypeFilterBusinessFilter!]
  updated: DateFieldComparison
}

input MembershipTypeSort {
  direction: SortDirection!
  field: MembershipTypeSortFields!
  nulls: SortNulls
}

enum MembershipTypeSortFields {
  created
  description
  id
  name
  pointsPerTicket
  price
  updated
}

input MembershipTypeSubscriptionFilter {
  and: [MembershipTypeSubscriptionFilter!]
  created: DateFieldComparison
  description: StringFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [MembershipTypeSubscriptionFilter!]
  pointsPerTicket: NumberFieldComparison
  price: NumberFieldComparison
  updated: DateFieldComparison
}

input MembershipTypeUpdateFilter {
  and: [MembershipTypeUpdateFilter!]
  created: DateFieldComparison
  description: StringFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [MembershipTypeUpdateFilter!]
  pointsPerTicket: NumberFieldComparison
  price: NumberFieldComparison
  updated: DateFieldComparison
}

input MembershipUpdateFilter {
  and: [MembershipUpdateFilter!]
  businessId: StringFieldComparison
  created: DateFieldComparison
  expiryDate: DateFieldComparison
  id: IDFilterComparison
  membershipTypeId: StringFieldComparison
  or: [MembershipUpdateFilter!]
  points: NumberFieldComparison
  updated: DateFieldComparison
  userId: StringFieldComparison
}

type Mutation {
  anonymizeUser(input: AnonymizeUser!): String!
  createBusiness(input: CreateBusiness!): Business!
  createEvent(input: CreateEvent!): Event!
  createManyBenefits(input: CreateManyBenefitsInput!): [Benefit!]!
  createManyBusinessUsers(input: CreateManyBusinessUsersInput!): [BusinessUser!]!
  createManyBusinesses(input: CreateManyBusinessesInput!): [Business!]!
  createManyDiscounts(input: CreateManyDiscountsInput!): [Discount!]!
  createManyEvents(input: CreateManyEventsInput!): [Event!]!
  createManyMembershipTypes(input: CreateManyMembershipTypesInput!): [MembershipType!]!
  createManyMemberships(input: CreateManyMembershipsInput!): [Membership!]!
  createManyOrders(input: CreateManyOrdersInput!): [Order!]!
  createManyPriceCategories(input: CreateManyPriceCategoriesInput!): [PriceCategory!]!
  createManyRows(input: CreateManyRowsInput!): [Row!]!
  createManySeats(input: CreateManySeatsInput!): [Seat!]!
  createManySections(input: CreateManySectionsInput!): [Section!]!
  createManyTemplateDiscounts(input: CreateManyTemplateDiscountsInput!): [TemplateDiscount!]!
  createManyTemplates(input: CreateManyTemplatesInput!): [Template!]!
  createManyTickets(input: CreateManyTicketsInput!): [Ticket!]!
  createManyUserBenefits(input: CreateManyUserBenefitsInput!): [UserBenefit!]!
  createManyUsers(input: CreateManyUsersInput!): [User!]!
  createManyVenues(input: CreateManyVenuesInput!): [Venue!]!
  createOneBenefit(input: CreateOneBenefitInput!): Benefit!
  createOneBusiness(input: CreateOneBusinessInput!): Business!
  createOneBusinessUser(input: CreateOneBusinessUserInput!): BusinessUser!
  createOneDiscount(input: CreateOneDiscountInput!): Discount!
  createOneEvent(input: CreateOneEventInput!): Event!
  createOneMembership(input: CreateOneMembershipInput!): Membership!
  createOneMembershipType(input: CreateOneMembershipTypeInput!): MembershipType!
  createOneOrder(input: CreateOneOrderInput!): Order!
  createOnePriceCategory(input: CreateOnePriceCategoryInput!): PriceCategory!
  createOneRow(input: CreateOneRowInput!): Row!
  createOneSeat(input: CreateOneSeatInput!): Seat!
  createOneSection(input: CreateOneSectionInput!): Section!
  createOneTemplate(input: CreateOneTemplateInput!): Template!
  createOneTemplateDiscount(input: CreateOneTemplateDiscountInput!): TemplateDiscount!
  createOneTicket(input: CreateOneTicketInput!): Ticket!
  createOneUser(input: CreateOneUserInput!): User!
  createOneUserBenefit(input: CreateOneUserBenefitInput!): UserBenefit!
  createOneVenue(input: CreateOneVenueInput!): Venue!
  createTemplate(input: CreateTemplate!): Template!
  createTickets(input: CreateTicketOrder!): Event!
  createVenue(input: CreateVenue!): Venue!
  deleteManyBenefits(input: DeleteManyBenefitsInput!): DeleteManyResponse!
  deleteManyBusinessUsers(input: DeleteManyBusinessUsersInput!): DeleteManyResponse!
  deleteManyBusinesses(input: DeleteManyBusinessesInput!): DeleteManyResponse!
  deleteManyDiscounts(input: DeleteManyDiscountsInput!): DeleteManyResponse!
  deleteManyEvents(input: DeleteManyEventsInput!): DeleteManyResponse!
  deleteManyMembershipTypes(input: DeleteManyMembershipTypesInput!): DeleteManyResponse!
  deleteManyMemberships(input: DeleteManyMembershipsInput!): DeleteManyResponse!
  deleteManyOrders(input: DeleteManyOrdersInput!): DeleteManyResponse!
  deleteManyPriceCategories(input: DeleteManyPriceCategoriesInput!): DeleteManyResponse!
  deleteManyRows(input: DeleteManyRowsInput!): DeleteManyResponse!
  deleteManySeats(input: DeleteManySeatsInput!): DeleteManyResponse!
  deleteManySections(input: DeleteManySectionsInput!): DeleteManyResponse!
  deleteManyTemplateDiscounts(input: DeleteManyTemplateDiscountsInput!): DeleteManyResponse!
  deleteManyTemplates(input: DeleteManyTemplatesInput!): DeleteManyResponse!
  deleteManyTickets(input: DeleteManyTicketsInput!): DeleteManyResponse!
  deleteManyUserBenefits(input: DeleteManyUserBenefitsInput!): DeleteManyResponse!
  deleteManyUsers(input: DeleteManyUsersInput!): DeleteManyResponse!
  deleteManyVenues(input: DeleteManyVenuesInput!): DeleteManyResponse!
  deleteOneBenefit(input: DeleteOneBenefitInput!): BenefitDeleteResponse!
  deleteOneBusiness(input: DeleteOneBusinessInput!): BusinessDeleteResponse!
  deleteOneBusinessUser(input: DeleteOneBusinessUserInput!): BusinessUserDeleteResponse!
  deleteOneDiscount(input: DeleteOneDiscountInput!): DiscountDeleteResponse!
  deleteOneEvent(input: DeleteOneEventInput!): EventDeleteResponse!
  deleteOneMembership(input: DeleteOneMembershipInput!): MembershipDeleteResponse!
  deleteOneMembershipType(input: DeleteOneMembershipTypeInput!): MembershipTypeDeleteResponse!
  deleteOneOrder(input: DeleteOneOrderInput!): OrderDeleteResponse!
  deleteOnePriceCategory(input: DeleteOnePriceCategoryInput!): PriceCategoryDeleteResponse!
  deleteOneRow(input: DeleteOneRowInput!): RowDeleteResponse!
  deleteOneSeat(input: DeleteOneSeatInput!): SeatDeleteResponse!
  deleteOneSection(input: DeleteOneSectionInput!): SectionDeleteResponse!
  deleteOneTemplate(input: DeleteOneTemplateInput!): TemplateDeleteResponse!
  deleteOneTemplateDiscount(input: DeleteOneTemplateDiscountInput!): TemplateDiscountDeleteResponse!
  deleteOneTicket(input: DeleteOneTicketInput!): TicketDeleteResponse!
  deleteOneUser(input: DeleteOneUserInput!): UserDeleteResponse!
  deleteOneUserBenefit(input: DeleteOneUserBenefitInput!): UserBenefitDeleteResponse!
  deleteOneVenue(input: DeleteOneVenueInput!): VenueDeleteResponse!
  sendEmail(input: BatchUserEmail!): Boolean!
  updateEvent(input: UpdateEvent!): Event!
  updateManyBenefits(input: UpdateManyBenefitsInput!): UpdateManyResponse!
  updateManyBusinessUsers(input: UpdateManyBusinessUsersInput!): UpdateManyResponse!
  updateManyBusinesses(input: UpdateManyBusinessesInput!): UpdateManyResponse!
  updateManyDiscounts(input: UpdateManyDiscountsInput!): UpdateManyResponse!
  updateManyEvents(input: UpdateManyEventsInput!): UpdateManyResponse!
  updateManyMembershipTypes(input: UpdateManyMembershipTypesInput!): UpdateManyResponse!
  updateManyMemberships(input: UpdateManyMembershipsInput!): UpdateManyResponse!
  updateManyOrders(input: UpdateManyOrdersInput!): UpdateManyResponse!
  updateManyPriceCategories(input: UpdateManyPriceCategoriesInput!): UpdateManyResponse!
  updateManyRows(input: UpdateManyRowsInput!): UpdateManyResponse!
  updateManySeats(input: UpdateManySeatsInput!): UpdateManyResponse!
  updateManySections(input: UpdateManySectionsInput!): UpdateManyResponse!
  updateManyTemplateDiscounts(input: UpdateManyTemplateDiscountsInput!): UpdateManyResponse!
  updateManyTemplates(input: UpdateManyTemplatesInput!): UpdateManyResponse!
  updateManyTickets(input: UpdateManyTicketsInput!): UpdateManyResponse!
  updateManyUserBenefits(input: UpdateManyUserBenefitsInput!): UpdateManyResponse!
  updateManyUsers(input: UpdateManyUsersInput!): UpdateManyResponse!
  updateManyVenues(input: UpdateManyVenuesInput!): UpdateManyResponse!
  updateOneBenefit(input: UpdateOneBenefitInput!): Benefit!
  updateOneBusiness(input: UpdateOneBusinessInput!): Business!
  updateOneBusinessUser(input: UpdateOneBusinessUserInput!): BusinessUser!
  updateOneDiscount(input: UpdateOneDiscountInput!): Discount!
  updateOneEvent(input: UpdateOneEventInput!): Event!
  updateOneMembership(input: UpdateOneMembershipInput!): Membership!
  updateOneMembershipType(input: UpdateOneMembershipTypeInput!): MembershipType!
  updateOneOrder(input: UpdateOneOrderInput!): Order!
  updateOnePriceCategory(input: UpdateOnePriceCategoryInput!): PriceCategory!
  updateOneRow(input: UpdateOneRowInput!): Row!
  updateOneSeat(input: UpdateOneSeatInput!): Seat!
  updateOneSection(input: UpdateOneSectionInput!): Section!
  updateOneTemplate(input: UpdateOneTemplateInput!): Template!
  updateOneTemplateDiscount(input: UpdateOneTemplateDiscountInput!): TemplateDiscount!
  updateOneTicket(input: UpdateOneTicketInput!): Ticket!
  updateOneUser(input: UpdateOneUserInput!): User!
  updateOneUserBenefit(input: UpdateOneUserBenefitInput!): UserBenefit!
  updateOneVenue(input: UpdateOneVenueInput!): Venue!
  updatePassword(input: UpdatePassword!): String!
  updateTemplate(input: UpdateTemplate!): Template!
  updateVenue(input: UpdateVenue!): Venue!
}

input NumberFieldComparison {
  between: NumberFieldComparisonBetween
  eq: Float
  gt: Float
  gte: Float
  in: [Float!]
  is: Boolean
  isNot: Boolean
  lt: Float
  lte: Float
  neq: Float
  notBetween: NumberFieldComparisonBetween
  notIn: [Float!]
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

type OffsetPageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean
}

input OffsetPaging {
  """Limit the number of records returned"""
  limit: Int

  """Offset to start returning records from"""
  offset: Int
}

type Order {
  business: Business!
  created: DateTime!
  id: ID!
  total: Float!
  updated: DateTime!
  user: User
}

type OrderConnection {
  """Array of nodes."""
  nodes: [Order!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

input OrderDeleteFilter {
  and: [OrderDeleteFilter!]
  businessId: StringFieldComparison
  created: DateFieldComparison
  id: IDFilterComparison
  or: [OrderDeleteFilter!]
  total: NumberFieldComparison
  updated: DateFieldComparison
  userId: StringFieldComparison
}

type OrderDeleteResponse {
  created: DateTime
  id: ID
  total: Float
  updated: DateTime
}

input OrderFilter {
  and: [OrderFilter!]
  business: OrderFilterBusinessFilter
  businessId: StringFieldComparison
  created: DateFieldComparison
  id: IDFilterComparison
  or: [OrderFilter!]
  total: NumberFieldComparison
  updated: DateFieldComparison
  user: OrderFilterUserFilter
  userId: StringFieldComparison
}

input OrderFilterBusinessFilter {
  and: [OrderFilterBusinessFilter!]
  created: DateFieldComparison
  currency: CurrencyFilterComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [OrderFilterBusinessFilter!]
  updated: DateFieldComparison
}

input OrderFilterUserFilter {
  and: [OrderFilterUserFilter!]
  avatarUrl: StringFieldComparison
  birthDate: DateFieldComparison
  created: DateFieldComparison
  defaultBusinessId: StringFieldComparison
  deleted: DateFieldComparison
  email: StringFieldComparison
  firstName: StringFieldComparison
  id: IDFilterComparison
  lastName: StringFieldComparison
  or: [OrderFilterUserFilter!]
  placeOfResidence: StringFieldComparison
  updated: DateFieldComparison
}

type OrderGraph {
  date: String!
  total: Float!
}

input OrderSort {
  direction: SortDirection!
  field: OrderSortFields!
  nulls: SortNulls
}

enum OrderSortFields {
  businessId
  created
  id
  total
  updated
  userId
}

input OrderSubscriptionFilter {
  and: [OrderSubscriptionFilter!]
  businessId: StringFieldComparison
  created: DateFieldComparison
  id: IDFilterComparison
  or: [OrderSubscriptionFilter!]
  total: NumberFieldComparison
  updated: DateFieldComparison
  userId: StringFieldComparison
}

input OrderUpdateFilter {
  and: [OrderUpdateFilter!]
  businessId: StringFieldComparison
  created: DateFieldComparison
  id: IDFilterComparison
  or: [OrderUpdateFilter!]
  total: NumberFieldComparison
  updated: DateFieldComparison
  userId: StringFieldComparison
}

type PriceCategory {
  created: DateTime!
  endDate: DateTime
  id: ID!
  name: String!
  price: Float!
  section: Section!
  startDate: DateTime
  template: Template!
  updated: DateTime!
}

type PriceCategoryAvailable {
  counts: [Float!]!
  nodes: [PriceCategory!]!
}

type PriceCategoryConnection {
  """Array of nodes."""
  nodes: [PriceCategory!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

input PriceCategoryDeleteFilter {
  and: [PriceCategoryDeleteFilter!]
  created: DateFieldComparison
  endDate: DateFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [PriceCategoryDeleteFilter!]
  price: NumberFieldComparison
  sectionId: StringFieldComparison
  startDate: DateFieldComparison
  templateId: StringFieldComparison
  updated: DateFieldComparison
}

type PriceCategoryDeleteResponse {
  created: DateTime
  endDate: DateTime
  id: ID
  name: String
  price: Float
  startDate: DateTime
  updated: DateTime
}

input PriceCategoryFilter {
  and: [PriceCategoryFilter!]
  created: DateFieldComparison
  endDate: DateFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [PriceCategoryFilter!]
  price: NumberFieldComparison
  section: PriceCategoryFilterSectionFilter
  sectionId: StringFieldComparison
  startDate: DateFieldComparison
  template: PriceCategoryFilterTemplateFilter
  templateId: StringFieldComparison
  updated: DateFieldComparison
}

input PriceCategoryFilterSectionFilter {
  and: [PriceCategoryFilterSectionFilter!]
  capacity: NumberFieldComparison
  created: DateFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [PriceCategoryFilterSectionFilter!]
  updated: DateFieldComparison
  venueId: StringFieldComparison
}

input PriceCategoryFilterTemplateFilter {
  and: [PriceCategoryFilterTemplateFilter!]
  category: CategoryFilterComparison
  created: DateFieldComparison
  description: StringFieldComparison
  id: IDFilterComparison
  language: LanguageFilterComparison
  length: NumberFieldComparison
  name: StringFieldComparison
  or: [PriceCategoryFilterTemplateFilter!]
  subtitles: LanguageFilterComparison
  type: TypeFilterComparison
  updated: DateFieldComparison
  venueId: StringFieldComparison
}

input PriceCategorySort {
  direction: SortDirection!
  field: PriceCategorySortFields!
  nulls: SortNulls
}

enum PriceCategorySortFields {
  created
  endDate
  id
  name
  price
  sectionId
  startDate
  templateId
  updated
}

input PriceCategorySubscriptionFilter {
  and: [PriceCategorySubscriptionFilter!]
  created: DateFieldComparison
  endDate: DateFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [PriceCategorySubscriptionFilter!]
  price: NumberFieldComparison
  sectionId: StringFieldComparison
  startDate: DateFieldComparison
  templateId: StringFieldComparison
  updated: DateFieldComparison
}

input PriceCategoryUpdateFilter {
  and: [PriceCategoryUpdateFilter!]
  created: DateFieldComparison
  endDate: DateFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [PriceCategoryUpdateFilter!]
  price: NumberFieldComparison
  sectionId: StringFieldComparison
  startDate: DateFieldComparison
  templateId: StringFieldComparison
  updated: DateFieldComparison
}

type Query {
  benefit(
    """The id of the record to find."""
    id: ID!
  ): Benefit!
  benefits(
    """Specify to filter the records returned."""
    filter: BenefitFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [BenefitSort!]! = []
  ): BenefitConnection!
  business(
    """The id of the record to find."""
    id: ID!
  ): Business!
  businessUser(
    """The id of the record to find."""
    id: ID!
  ): BusinessUser!
  businessUsers(
    """Specify to filter the records returned."""
    filter: BusinessUserFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [BusinessUserSort!]! = []
  ): BusinessUserConnection!
  businesses(
    """Specify to filter the records returned."""
    filter: BusinessFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [BusinessSort!]! = []
  ): BusinessConnection!
  discount(
    """The id of the record to find."""
    id: ID!
  ): Discount!
  discounts(
    """Specify to filter the records returned."""
    filter: DiscountFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [DiscountSort!]! = []
  ): DiscountConnection!
  event(
    """The id of the record to find."""
    id: ID!
  ): Event!
  events(
    """Specify to filter the records returned."""
    filter: EventFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [EventSort!]! = []
  ): EventConnection!
  getBusinessMetrics(meta: String!): BusinessMetrics!
  getEventCheckout(meta: String!): EventCheckoutDto!
  getEventPrices(
    """Specify to filter the records returned."""
    filter: PriceCategoryFilter! = {}
    meta: String!

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [PriceCategorySort!]! = []
  ): PriceCategoryAvailable!
  getOrderTotals(meta: String!): [OrderGraph!]!
  getUserBenefits(
    """Specify to filter the records returned."""
    filter: BenefitFilter! = {}
    meta: String!

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [BenefitSort!]! = []
  ): UserBenefits!
  getUserBusinesses(
    """Specify to filter the records returned."""
    filter: BusinessFilter! = {}
    meta: String!

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [BusinessSort!]! = []
  ): BusinessConnection!
  getUserTickets(
    """Specify to filter the records returned."""
    filter: TicketFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [TicketSort!]! = []
  ): TicketSet!
  membership(
    """The id of the record to find."""
    id: ID!
  ): Membership!
  membershipType(
    """The id of the record to find."""
    id: ID!
  ): MembershipType!
  membershipTypes(
    """Specify to filter the records returned."""
    filter: MembershipTypeFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [MembershipTypeSort!]! = []
  ): MembershipTypeConnection!
  memberships(
    """Specify to filter the records returned."""
    filter: MembershipFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [MembershipSort!]! = []
  ): MembershipConnection!
  order(
    """The id of the record to find."""
    id: ID!
  ): Order!
  orders(
    """Specify to filter the records returned."""
    filter: OrderFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [OrderSort!]! = []
  ): OrderConnection!
  priceCategories(
    """Specify to filter the records returned."""
    filter: PriceCategoryFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [PriceCategorySort!]! = []
  ): PriceCategoryConnection!
  priceCategory(
    """The id of the record to find."""
    id: ID!
  ): PriceCategory!
  profileInfo(
    """Specify to filter the records returned."""
    filter: UserFilter! = {}
    meta: String!

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [UserSort!]! = []
  ): UserProfile!
  row(
    """The id of the record to find."""
    id: ID!
  ): Row!
  rows(
    """Specify to filter the records returned."""
    filter: RowFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [RowSort!]! = []
  ): RowConnection!
  seat(
    """The id of the record to find."""
    id: ID!
  ): Seat!
  seats(
    """Specify to filter the records returned."""
    filter: SeatFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [SeatSort!]! = []
  ): SeatConnection!
  section(
    """The id of the record to find."""
    id: ID!
  ): Section!
  sections(
    """Specify to filter the records returned."""
    filter: SectionFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [SectionSort!]! = []
  ): SectionConnection!
  template(
    """The id of the record to find."""
    id: ID!
  ): Template!
  templateDiscount(
    """The id of the record to find."""
    id: ID!
  ): TemplateDiscount!
  templateDiscounts(
    """Specify to filter the records returned."""
    filter: TemplateDiscountFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [TemplateDiscountSort!]! = []
  ): TemplateDiscountConnection!
  templates(
    """Specify to filter the records returned."""
    filter: TemplateFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [TemplateSort!]! = []
  ): TemplateConnection!
  ticket(
    """The id of the record to find."""
    id: ID!
  ): Ticket!
  ticketAggregate(
    """Filter to find records to aggregate on"""
    filter: TicketAggregateFilter
  ): [TicketAggregateResponse!]!
  tickets(
    """Specify to filter the records returned."""
    filter: TicketFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [TicketSort!]! = []
  ): TicketConnection!
  user(
    """The id of the record to find."""
    id: ID!
  ): User!
  userBenefit(
    """The id of the record to find."""
    id: ID!
  ): UserBenefit!
  userBenefits(
    """Specify to filter the records returned."""
    filter: UserBenefitFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [UserBenefitSort!]! = []
  ): UserBenefitConnection!
  users(
    """Specify to filter the records returned."""
    filter: UserFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [UserSort!]! = []
  ): UserConnection!
  venue(
    """The id of the record to find."""
    id: ID!
  ): Venue!
  venues(
    """Specify to filter the records returned."""
    filter: VenueFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [VenueSort!]! = []
  ): VenueConnection!
}

enum Role {
  Admin
  Customer
}

input RoleFilterComparison {
  eq: Role
  gt: Role
  gte: Role
  iLike: Role
  in: [Role!]
  is: Boolean
  isNot: Boolean
  like: Role
  lt: Role
  lte: Role
  neq: Role
  notILike: Role
  notIn: [Role!]
  notLike: Role
}

type Row {
  created: DateTime!
  id: ID!
  name: String!
  section: Section!
  updated: DateTime!
}

type RowConnection {
  """Array of nodes."""
  nodes: [Row!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

input RowDeleteFilter {
  and: [RowDeleteFilter!]
  created: DateFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [RowDeleteFilter!]
  sectionId: StringFieldComparison
  updated: DateFieldComparison
}

type RowDeleteResponse {
  created: DateTime
  id: ID
  name: String
  updated: DateTime
}

input RowFilter {
  and: [RowFilter!]
  created: DateFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [RowFilter!]
  section: RowFilterSectionFilter
  sectionId: StringFieldComparison
  updated: DateFieldComparison
}

input RowFilterSectionFilter {
  and: [RowFilterSectionFilter!]
  capacity: NumberFieldComparison
  created: DateFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [RowFilterSectionFilter!]
  updated: DateFieldComparison
  venueId: StringFieldComparison
}

input RowSort {
  direction: SortDirection!
  field: RowSortFields!
  nulls: SortNulls
}

enum RowSortFields {
  created
  id
  name
  sectionId
  updated
}

input RowSubscriptionFilter {
  and: [RowSubscriptionFilter!]
  created: DateFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [RowSubscriptionFilter!]
  sectionId: StringFieldComparison
  updated: DateFieldComparison
}

input RowUpdateFilter {
  and: [RowUpdateFilter!]
  created: DateFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [RowUpdateFilter!]
  sectionId: StringFieldComparison
  updated: DateFieldComparison
}

type Seat {
  created: DateTime!
  id: ID!
  name: String!
  section: Section!
  updated: DateTime!
}

type SeatConnection {
  """Array of nodes."""
  nodes: [Seat!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

input SeatDeleteFilter {
  and: [SeatDeleteFilter!]
  created: DateFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [SeatDeleteFilter!]
  sectionId: StringFieldComparison
  updated: DateFieldComparison
}

type SeatDeleteResponse {
  created: DateTime
  id: ID
  name: String
  updated: DateTime
}

input SeatFilter {
  and: [SeatFilter!]
  created: DateFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [SeatFilter!]
  section: SeatFilterSectionFilter
  sectionId: StringFieldComparison
  updated: DateFieldComparison
}

input SeatFilterSectionFilter {
  and: [SeatFilterSectionFilter!]
  capacity: NumberFieldComparison
  created: DateFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [SeatFilterSectionFilter!]
  updated: DateFieldComparison
  venueId: StringFieldComparison
}

input SeatSort {
  direction: SortDirection!
  field: SeatSortFields!
  nulls: SortNulls
}

enum SeatSortFields {
  created
  id
  name
  sectionId
  updated
}

input SeatSubscriptionFilter {
  and: [SeatSubscriptionFilter!]
  created: DateFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [SeatSubscriptionFilter!]
  sectionId: StringFieldComparison
  updated: DateFieldComparison
}

input SeatUpdateFilter {
  and: [SeatUpdateFilter!]
  created: DateFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [SeatUpdateFilter!]
  sectionId: StringFieldComparison
  updated: DateFieldComparison
}

type Section {
  capacity: Float
  created: DateTime!
  id: ID!
  name: String!
  updated: DateTime!
  venue: Venue!
}

type SectionConnection {
  """Array of nodes."""
  nodes: [Section!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

input SectionDeleteFilter {
  and: [SectionDeleteFilter!]
  capacity: NumberFieldComparison
  created: DateFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [SectionDeleteFilter!]
  updated: DateFieldComparison
  venueId: StringFieldComparison
}

type SectionDeleteResponse {
  capacity: Float
  created: DateTime
  id: ID
  name: String
  updated: DateTime
}

input SectionFilter {
  and: [SectionFilter!]
  capacity: NumberFieldComparison
  created: DateFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [SectionFilter!]
  updated: DateFieldComparison
  venue: SectionFilterVenueFilter
  venueId: StringFieldComparison
}

input SectionFilterVenueFilter {
  and: [SectionFilterVenueFilter!]
  buildingNumber: StringFieldComparison
  capacity: NumberFieldComparison
  city: StringFieldComparison
  created: DateFieldComparison
  hasSeats: BooleanFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [SectionFilterVenueFilter!]
  street: StringFieldComparison
  updated: DateFieldComparison
}

input SectionSort {
  direction: SortDirection!
  field: SectionSortFields!
  nulls: SortNulls
}

enum SectionSortFields {
  capacity
  created
  id
  name
  updated
  venueId
}

input SectionSubscriptionFilter {
  and: [SectionSubscriptionFilter!]
  capacity: NumberFieldComparison
  created: DateFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [SectionSubscriptionFilter!]
  updated: DateFieldComparison
  venueId: StringFieldComparison
}

input SectionUpdateFilter {
  and: [SectionUpdateFilter!]
  capacity: NumberFieldComparison
  created: DateFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [SectionUpdateFilter!]
  updated: DateFieldComparison
  venueId: StringFieldComparison
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input StringFieldComparison {
  eq: String
  gt: String
  gte: String
  iLike: String
  in: [String!]
  is: Boolean
  isNot: Boolean
  like: String
  lt: String
  lte: String
  neq: String
  notILike: String
  notIn: [String!]
  notLike: String
}

type Subscription {
  createdBenefit(input: CreateBenefitSubscriptionFilterInput): Benefit!
  createdBusiness(input: CreateBusinessSubscriptionFilterInput): Business!
  createdBusinessUser(input: CreateBusinessUserSubscriptionFilterInput): BusinessUser!
  createdDiscount(input: CreateDiscountSubscriptionFilterInput): Discount!
  createdEvent(input: CreateEventSubscriptionFilterInput): Event!
  createdMembership(input: CreateMembershipSubscriptionFilterInput): Membership!
  createdMembershipType(input: CreateMembershipTypeSubscriptionFilterInput): MembershipType!
  createdOrder(input: CreateOrderSubscriptionFilterInput): Order!
  createdPriceCategory(input: CreatePriceCategorySubscriptionFilterInput): PriceCategory!
  createdRow(input: CreateRowSubscriptionFilterInput): Row!
  createdSeat(input: CreateSeatSubscriptionFilterInput): Seat!
  createdSection(input: CreateSectionSubscriptionFilterInput): Section!
  createdTemplate(input: CreateTemplateSubscriptionFilterInput): Template!
  createdTemplateDiscount(input: CreateTemplateDiscountSubscriptionFilterInput): TemplateDiscount!
  createdTicket(input: CreateTicketSubscriptionFilterInput): Ticket!
  createdUser(input: CreateUserSubscriptionFilterInput): User!
  createdUserBenefit(input: CreateUserBenefitSubscriptionFilterInput): UserBenefit!
  createdVenue(input: CreateVenueSubscriptionFilterInput): Venue!
  deletedManyBenefits: DeleteManyResponse!
  deletedManyBusinessUsers: DeleteManyResponse!
  deletedManyBusinesses: DeleteManyResponse!
  deletedManyDiscounts: DeleteManyResponse!
  deletedManyEvents: DeleteManyResponse!
  deletedManyMembershipTypes: DeleteManyResponse!
  deletedManyMemberships: DeleteManyResponse!
  deletedManyOrders: DeleteManyResponse!
  deletedManyPriceCategories: DeleteManyResponse!
  deletedManyRows: DeleteManyResponse!
  deletedManySeats: DeleteManyResponse!
  deletedManySections: DeleteManyResponse!
  deletedManyTemplateDiscounts: DeleteManyResponse!
  deletedManyTemplates: DeleteManyResponse!
  deletedManyTickets: DeleteManyResponse!
  deletedManyUserBenefits: DeleteManyResponse!
  deletedManyUsers: DeleteManyResponse!
  deletedManyVenues: DeleteManyResponse!
  deletedOneBenefit(input: DeleteOneBenefitSubscriptionFilterInput): BenefitDeleteResponse!
  deletedOneBusiness(input: DeleteOneBusinessSubscriptionFilterInput): BusinessDeleteResponse!
  deletedOneBusinessUser(input: DeleteOneBusinessUserSubscriptionFilterInput): BusinessUserDeleteResponse!
  deletedOneDiscount(input: DeleteOneDiscountSubscriptionFilterInput): DiscountDeleteResponse!
  deletedOneEvent(input: DeleteOneEventSubscriptionFilterInput): EventDeleteResponse!
  deletedOneMembership(input: DeleteOneMembershipSubscriptionFilterInput): MembershipDeleteResponse!
  deletedOneMembershipType(input: DeleteOneMembershipTypeSubscriptionFilterInput): MembershipTypeDeleteResponse!
  deletedOneOrder(input: DeleteOneOrderSubscriptionFilterInput): OrderDeleteResponse!
  deletedOnePriceCategory(input: DeleteOnePriceCategorySubscriptionFilterInput): PriceCategoryDeleteResponse!
  deletedOneRow(input: DeleteOneRowSubscriptionFilterInput): RowDeleteResponse!
  deletedOneSeat(input: DeleteOneSeatSubscriptionFilterInput): SeatDeleteResponse!
  deletedOneSection(input: DeleteOneSectionSubscriptionFilterInput): SectionDeleteResponse!
  deletedOneTemplate(input: DeleteOneTemplateSubscriptionFilterInput): TemplateDeleteResponse!
  deletedOneTemplateDiscount(input: DeleteOneTemplateDiscountSubscriptionFilterInput): TemplateDiscountDeleteResponse!
  deletedOneTicket(input: DeleteOneTicketSubscriptionFilterInput): TicketDeleteResponse!
  deletedOneUser(input: DeleteOneUserSubscriptionFilterInput): UserDeleteResponse!
  deletedOneUserBenefit(input: DeleteOneUserBenefitSubscriptionFilterInput): UserBenefitDeleteResponse!
  deletedOneVenue(input: DeleteOneVenueSubscriptionFilterInput): VenueDeleteResponse!
  updatedManyBenefits: UpdateManyResponse!
  updatedManyBusinessUsers: UpdateManyResponse!
  updatedManyBusinesses: UpdateManyResponse!
  updatedManyDiscounts: UpdateManyResponse!
  updatedManyEvents: UpdateManyResponse!
  updatedManyMembershipTypes: UpdateManyResponse!
  updatedManyMemberships: UpdateManyResponse!
  updatedManyOrders: UpdateManyResponse!
  updatedManyPriceCategories: UpdateManyResponse!
  updatedManyRows: UpdateManyResponse!
  updatedManySeats: UpdateManyResponse!
  updatedManySections: UpdateManyResponse!
  updatedManyTemplateDiscounts: UpdateManyResponse!
  updatedManyTemplates: UpdateManyResponse!
  updatedManyTickets: UpdateManyResponse!
  updatedManyUserBenefits: UpdateManyResponse!
  updatedManyUsers: UpdateManyResponse!
  updatedManyVenues: UpdateManyResponse!
  updatedOneBenefit(input: UpdateOneBenefitSubscriptionFilterInput): Benefit!
  updatedOneBusiness(input: UpdateOneBusinessSubscriptionFilterInput): Business!
  updatedOneBusinessUser(input: UpdateOneBusinessUserSubscriptionFilterInput): BusinessUser!
  updatedOneDiscount(input: UpdateOneDiscountSubscriptionFilterInput): Discount!
  updatedOneEvent(input: UpdateOneEventSubscriptionFilterInput): Event!
  updatedOneMembership(input: UpdateOneMembershipSubscriptionFilterInput): Membership!
  updatedOneMembershipType(input: UpdateOneMembershipTypeSubscriptionFilterInput): MembershipType!
  updatedOneOrder(input: UpdateOneOrderSubscriptionFilterInput): Order!
  updatedOnePriceCategory(input: UpdateOnePriceCategorySubscriptionFilterInput): PriceCategory!
  updatedOneRow(input: UpdateOneRowSubscriptionFilterInput): Row!
  updatedOneSeat(input: UpdateOneSeatSubscriptionFilterInput): Seat!
  updatedOneSection(input: UpdateOneSectionSubscriptionFilterInput): Section!
  updatedOneTemplate(input: UpdateOneTemplateSubscriptionFilterInput): Template!
  updatedOneTemplateDiscount(input: UpdateOneTemplateDiscountSubscriptionFilterInput): TemplateDiscount!
  updatedOneTicket(input: UpdateOneTicketSubscriptionFilterInput): Ticket!
  updatedOneUser(input: UpdateOneUserSubscriptionFilterInput): User!
  updatedOneUserBenefit(input: UpdateOneUserBenefitSubscriptionFilterInput): UserBenefit!
  updatedOneVenue(input: UpdateOneVenueSubscriptionFilterInput): Venue!
}

type Template {
  business: Business!
  category: Category!
  created: DateTime!
  description: String
  id: ID!
  language: Language
  length: Float
  name: String!
  posterUrl: String
  subtitles: Language
  type: Type!
  updated: DateTime!
  venue: Venue!
}

type TemplateConnection {
  """Array of nodes."""
  nodes: [Template!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

input TemplateDeleteFilter {
  and: [TemplateDeleteFilter!]
  category: CategoryFilterComparison
  created: DateFieldComparison
  description: StringFieldComparison
  id: IDFilterComparison
  language: LanguageFilterComparison
  length: NumberFieldComparison
  name: StringFieldComparison
  or: [TemplateDeleteFilter!]
  subtitles: LanguageFilterComparison
  type: TypeFilterComparison
  updated: DateFieldComparison
  venueId: StringFieldComparison
}

type TemplateDeleteResponse {
  category: Category
  created: DateTime
  description: String
  id: ID
  language: Language
  length: Float
  name: String
  posterUrl: String
  subtitles: Language
  type: Type
  updated: DateTime
}

type TemplateDiscount {
  created: DateTime!
  discount: Discount!
  template: Template!
}

type TemplateDiscountConnection {
  """Array of nodes."""
  nodes: [TemplateDiscount!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

input TemplateDiscountDeleteFilter {
  and: [TemplateDiscountDeleteFilter!]
  created: DateFieldComparison
  discountId: StringFieldComparison
  or: [TemplateDiscountDeleteFilter!]
  templateId: StringFieldComparison
}

type TemplateDiscountDeleteResponse {
  created: DateTime
}

input TemplateDiscountFilter {
  and: [TemplateDiscountFilter!]
  created: DateFieldComparison
  discount: TemplateDiscountFilterDiscountFilter
  discountId: StringFieldComparison
  or: [TemplateDiscountFilter!]
  template: TemplateDiscountFilterTemplateFilter
  templateId: StringFieldComparison
}

input TemplateDiscountFilterDiscountFilter {
  and: [TemplateDiscountFilterDiscountFilter!]
  businessId: StringFieldComparison
  created: DateFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [TemplateDiscountFilterDiscountFilter!]
  percentage: NumberFieldComparison
  updated: DateFieldComparison
}

input TemplateDiscountFilterTemplateFilter {
  and: [TemplateDiscountFilterTemplateFilter!]
  category: CategoryFilterComparison
  created: DateFieldComparison
  description: StringFieldComparison
  id: IDFilterComparison
  language: LanguageFilterComparison
  length: NumberFieldComparison
  name: StringFieldComparison
  or: [TemplateDiscountFilterTemplateFilter!]
  subtitles: LanguageFilterComparison
  type: TypeFilterComparison
  updated: DateFieldComparison
  venueId: StringFieldComparison
}

input TemplateDiscountSort {
  direction: SortDirection!
  field: TemplateDiscountSortFields!
  nulls: SortNulls
}

enum TemplateDiscountSortFields {
  created
  discountId
  templateId
}

input TemplateDiscountSubscriptionFilter {
  and: [TemplateDiscountSubscriptionFilter!]
  created: DateFieldComparison
  discountId: StringFieldComparison
  or: [TemplateDiscountSubscriptionFilter!]
  templateId: StringFieldComparison
}

input TemplateDiscountUpdateFilter {
  and: [TemplateDiscountUpdateFilter!]
  created: DateFieldComparison
  discountId: StringFieldComparison
  or: [TemplateDiscountUpdateFilter!]
  templateId: StringFieldComparison
}

input TemplateFilter {
  and: [TemplateFilter!]
  business: TemplateFilterBusinessFilter
  category: CategoryFilterComparison
  created: DateFieldComparison
  description: StringFieldComparison
  id: IDFilterComparison
  language: LanguageFilterComparison
  length: NumberFieldComparison
  name: StringFieldComparison
  or: [TemplateFilter!]
  subtitles: LanguageFilterComparison
  type: TypeFilterComparison
  updated: DateFieldComparison
  venue: TemplateFilterVenueFilter
  venueId: StringFieldComparison
}

input TemplateFilterBusinessFilter {
  and: [TemplateFilterBusinessFilter!]
  created: DateFieldComparison
  currency: CurrencyFilterComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [TemplateFilterBusinessFilter!]
  updated: DateFieldComparison
}

input TemplateFilterVenueFilter {
  and: [TemplateFilterVenueFilter!]
  buildingNumber: StringFieldComparison
  capacity: NumberFieldComparison
  city: StringFieldComparison
  created: DateFieldComparison
  hasSeats: BooleanFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [TemplateFilterVenueFilter!]
  street: StringFieldComparison
  updated: DateFieldComparison
}

input TemplateSort {
  direction: SortDirection!
  field: TemplateSortFields!
  nulls: SortNulls
}

enum TemplateSortFields {
  category
  created
  description
  id
  language
  length
  name
  subtitles
  type
  updated
  venueId
}

input TemplateSubscriptionFilter {
  and: [TemplateSubscriptionFilter!]
  category: CategoryFilterComparison
  created: DateFieldComparison
  description: StringFieldComparison
  id: IDFilterComparison
  language: LanguageFilterComparison
  length: NumberFieldComparison
  name: StringFieldComparison
  or: [TemplateSubscriptionFilter!]
  subtitles: LanguageFilterComparison
  type: TypeFilterComparison
  updated: DateFieldComparison
  venueId: StringFieldComparison
}

input TemplateUpdateFilter {
  and: [TemplateUpdateFilter!]
  category: CategoryFilterComparison
  created: DateFieldComparison
  description: StringFieldComparison
  id: IDFilterComparison
  language: LanguageFilterComparison
  length: NumberFieldComparison
  name: StringFieldComparison
  or: [TemplateUpdateFilter!]
  subtitles: LanguageFilterComparison
  type: TypeFilterComparison
  updated: DateFieldComparison
  venueId: StringFieldComparison
}

type Ticket {
  business: Business!
  created: DateTime!
  discount: Discount
  event: Event!
  id: ID!
  order: Order
  price: Float!
  row: Row
  seat: Seat
  section: Section!
  updated: DateTime!
  user: User
  validated: DateTime
}

input TicketAggregateFilter {
  and: [TicketAggregateFilter!]
  business: TicketAggregateFilterBusinessAggregateFilter
  businessId: StringFieldComparison
  created: DateFieldComparison
  discount: TicketAggregateFilterDiscountAggregateFilter
  event: TicketAggregateFilterEventAggregateFilter
  eventId: StringFieldComparison
  id: IDFilterComparison
  or: [TicketAggregateFilter!]
  order: TicketAggregateFilterOrderAggregateFilter
  price: NumberFieldComparison
  row: TicketAggregateFilterRowAggregateFilter
  rowId: StringFieldComparison
  seat: TicketAggregateFilterSeatAggregateFilter
  seatId: StringFieldComparison
  section: TicketAggregateFilterSectionAggregateFilter
  sectionId: StringFieldComparison
  updated: DateFieldComparison
  user: TicketAggregateFilterUserAggregateFilter
  userId: StringFieldComparison
  validated: DateFieldComparison
}

input TicketAggregateFilterBusinessAggregateFilter {
  and: [TicketAggregateFilterBusinessAggregateFilter!]
  created: DateFieldComparison
  currency: CurrencyFilterComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [TicketAggregateFilterBusinessAggregateFilter!]
  updated: DateFieldComparison
}

input TicketAggregateFilterDiscountAggregateFilter {
  and: [TicketAggregateFilterDiscountAggregateFilter!]
  businessId: StringFieldComparison
  created: DateFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [TicketAggregateFilterDiscountAggregateFilter!]
  percentage: NumberFieldComparison
  updated: DateFieldComparison
}

input TicketAggregateFilterEventAggregateFilter {
  and: [TicketAggregateFilterEventAggregateFilter!]
  businessId: StringFieldComparison
  created: DateFieldComparison
  date: DateFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [TicketAggregateFilterEventAggregateFilter!]
  templateId: StringFieldComparison
  updated: DateFieldComparison
}

input TicketAggregateFilterOrderAggregateFilter {
  and: [TicketAggregateFilterOrderAggregateFilter!]
  businessId: StringFieldComparison
  created: DateFieldComparison
  id: IDFilterComparison
  or: [TicketAggregateFilterOrderAggregateFilter!]
  total: NumberFieldComparison
  updated: DateFieldComparison
  userId: StringFieldComparison
}

input TicketAggregateFilterRowAggregateFilter {
  and: [TicketAggregateFilterRowAggregateFilter!]
  created: DateFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [TicketAggregateFilterRowAggregateFilter!]
  sectionId: StringFieldComparison
  updated: DateFieldComparison
}

input TicketAggregateFilterSeatAggregateFilter {
  and: [TicketAggregateFilterSeatAggregateFilter!]
  created: DateFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [TicketAggregateFilterSeatAggregateFilter!]
  sectionId: StringFieldComparison
  updated: DateFieldComparison
}

input TicketAggregateFilterSectionAggregateFilter {
  and: [TicketAggregateFilterSectionAggregateFilter!]
  capacity: NumberFieldComparison
  created: DateFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [TicketAggregateFilterSectionAggregateFilter!]
  updated: DateFieldComparison
  venueId: StringFieldComparison
}

input TicketAggregateFilterUserAggregateFilter {
  and: [TicketAggregateFilterUserAggregateFilter!]
  avatarUrl: StringFieldComparison
  birthDate: DateFieldComparison
  created: DateFieldComparison
  defaultBusinessId: StringFieldComparison
  deleted: DateFieldComparison
  email: StringFieldComparison
  firstName: StringFieldComparison
  id: IDFilterComparison
  lastName: StringFieldComparison
  or: [TicketAggregateFilterUserAggregateFilter!]
  placeOfResidence: StringFieldComparison
  updated: DateFieldComparison
}

type TicketAggregateGroupBy {
  businessId: String
  created(by: GroupBy! = DAY): DateTime
  eventId: String
  id: ID
  price: Float
  rowId: String
  seatId: String
  sectionId: String
  updated(by: GroupBy! = DAY): DateTime
  userId: String
  validated(by: GroupBy! = DAY): DateTime
}

type TicketAggregateResponse {
  avg: TicketAvgAggregate
  count: TicketCountAggregate
  groupBy: TicketAggregateGroupBy
  max: TicketMaxAggregate
  min: TicketMinAggregate
  sum: TicketSumAggregate
}

type TicketAvgAggregate {
  price: Float
}

type TicketConnection {
  """Array of nodes."""
  nodes: [Ticket!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type TicketCountAggregate {
  businessId: Int
  created: Int
  eventId: Int
  id: Int
  price: Int
  rowId: Int
  seatId: Int
  sectionId: Int
  updated: Int
  userId: Int
  validated: Int
}

input TicketDeleteFilter {
  and: [TicketDeleteFilter!]
  businessId: StringFieldComparison
  created: DateFieldComparison
  eventId: StringFieldComparison
  id: IDFilterComparison
  or: [TicketDeleteFilter!]
  price: NumberFieldComparison
  rowId: StringFieldComparison
  seatId: StringFieldComparison
  sectionId: StringFieldComparison
  updated: DateFieldComparison
  userId: StringFieldComparison
  validated: DateFieldComparison
}

type TicketDeleteResponse {
  created: DateTime
  id: ID
  price: Float
  updated: DateTime
  validated: DateTime
}

input TicketFilter {
  and: [TicketFilter!]
  business: TicketFilterBusinessFilter
  businessId: StringFieldComparison
  created: DateFieldComparison
  discount: TicketFilterDiscountFilter
  event: TicketFilterEventFilter
  eventId: StringFieldComparison
  id: IDFilterComparison
  or: [TicketFilter!]
  order: TicketFilterOrderFilter
  price: NumberFieldComparison
  row: TicketFilterRowFilter
  rowId: StringFieldComparison
  seat: TicketFilterSeatFilter
  seatId: StringFieldComparison
  section: TicketFilterSectionFilter
  sectionId: StringFieldComparison
  updated: DateFieldComparison
  user: TicketFilterUserFilter
  userId: StringFieldComparison
  validated: DateFieldComparison
}

input TicketFilterBusinessFilter {
  and: [TicketFilterBusinessFilter!]
  created: DateFieldComparison
  currency: CurrencyFilterComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [TicketFilterBusinessFilter!]
  updated: DateFieldComparison
}

input TicketFilterDiscountFilter {
  and: [TicketFilterDiscountFilter!]
  businessId: StringFieldComparison
  created: DateFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [TicketFilterDiscountFilter!]
  percentage: NumberFieldComparison
  updated: DateFieldComparison
}

input TicketFilterEventFilter {
  and: [TicketFilterEventFilter!]
  businessId: StringFieldComparison
  created: DateFieldComparison
  date: DateFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [TicketFilterEventFilter!]
  templateId: StringFieldComparison
  updated: DateFieldComparison
}

input TicketFilterOrderFilter {
  and: [TicketFilterOrderFilter!]
  businessId: StringFieldComparison
  created: DateFieldComparison
  id: IDFilterComparison
  or: [TicketFilterOrderFilter!]
  total: NumberFieldComparison
  updated: DateFieldComparison
  userId: StringFieldComparison
}

input TicketFilterRowFilter {
  and: [TicketFilterRowFilter!]
  created: DateFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [TicketFilterRowFilter!]
  sectionId: StringFieldComparison
  updated: DateFieldComparison
}

input TicketFilterSeatFilter {
  and: [TicketFilterSeatFilter!]
  created: DateFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [TicketFilterSeatFilter!]
  sectionId: StringFieldComparison
  updated: DateFieldComparison
}

input TicketFilterSectionFilter {
  and: [TicketFilterSectionFilter!]
  capacity: NumberFieldComparison
  created: DateFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [TicketFilterSectionFilter!]
  updated: DateFieldComparison
  venueId: StringFieldComparison
}

input TicketFilterUserFilter {
  and: [TicketFilterUserFilter!]
  avatarUrl: StringFieldComparison
  birthDate: DateFieldComparison
  created: DateFieldComparison
  defaultBusinessId: StringFieldComparison
  deleted: DateFieldComparison
  email: StringFieldComparison
  firstName: StringFieldComparison
  id: IDFilterComparison
  lastName: StringFieldComparison
  or: [TicketFilterUserFilter!]
  placeOfResidence: StringFieldComparison
  updated: DateFieldComparison
}

type TicketMaxAggregate {
  businessId: String
  created: DateTime
  eventId: String
  id: ID
  price: Float
  rowId: String
  seatId: String
  sectionId: String
  updated: DateTime
  userId: String
  validated: DateTime
}

type TicketMinAggregate {
  businessId: String
  created: DateTime
  eventId: String
  id: ID
  price: Float
  rowId: String
  seatId: String
  sectionId: String
  updated: DateTime
  userId: String
  validated: DateTime
}

type TicketSet {
  invalid: [UserTickets!]!
  valid: [UserTickets!]!
}

input TicketSort {
  direction: SortDirection!
  field: TicketSortFields!
  nulls: SortNulls
}

enum TicketSortFields {
  businessId
  created
  eventId
  id
  price
  rowId
  seatId
  sectionId
  updated
  userId
  validated
}

input TicketSubscriptionFilter {
  and: [TicketSubscriptionFilter!]
  businessId: StringFieldComparison
  created: DateFieldComparison
  eventId: StringFieldComparison
  id: IDFilterComparison
  or: [TicketSubscriptionFilter!]
  price: NumberFieldComparison
  rowId: StringFieldComparison
  seatId: StringFieldComparison
  sectionId: StringFieldComparison
  updated: DateFieldComparison
  userId: StringFieldComparison
  validated: DateFieldComparison
}

type TicketSumAggregate {
  price: Float
}

input TicketUpdateFilter {
  and: [TicketUpdateFilter!]
  businessId: StringFieldComparison
  created: DateFieldComparison
  eventId: StringFieldComparison
  id: IDFilterComparison
  or: [TicketUpdateFilter!]
  price: NumberFieldComparison
  rowId: StringFieldComparison
  seatId: StringFieldComparison
  sectionId: StringFieldComparison
  updated: DateFieldComparison
  userId: StringFieldComparison
  validated: DateFieldComparison
}

enum Type {
  Leaf
  Root
}

input TypeFilterComparison {
  eq: Type
  gt: Type
  gte: Type
  iLike: Type
  in: [Type!]
  is: Boolean
  isNot: Boolean
  like: Type
  lt: Type
  lte: Type
  neq: Type
  notILike: Type
  notIn: [Type!]
  notLike: Type
}

input UpdateBenefit {
  description: String
  expiryDate: DateTime
  membershipTypeId: ID
  name: String
  points: Float
}

input UpdateBusiness {
  apiKey: String
  created: DateTime
  currency: Currency
  id: ID
  logoUrl: String
  name: String
  updated: DateTime
}

input UpdateBusinessUser {
  created: DateTime
  role: Role = Customer
  updated: DateTime
}

input UpdateDiscount {
  created: DateTime
  id: ID
  name: String
  percentage: Float
  updated: DateTime
}

input UpdateEvent {
  date: DateTime
  id: ID!
  name: String
  seatMap: JSON
}

input UpdateManyBenefitsInput {
  """Filter used to find fields to update"""
  filter: BenefitUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateBenefit!
}

input UpdateManyBusinessUsersInput {
  """Filter used to find fields to update"""
  filter: BusinessUserUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateBusinessUser!
}

input UpdateManyBusinessesInput {
  """Filter used to find fields to update"""
  filter: BusinessUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateBusiness!
}

input UpdateManyDiscountsInput {
  """Filter used to find fields to update"""
  filter: DiscountUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateDiscount!
}

input UpdateManyEventsInput {
  """Filter used to find fields to update"""
  filter: EventUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateEvent!
}

input UpdateManyMembershipTypesInput {
  """Filter used to find fields to update"""
  filter: MembershipTypeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateMembershipType!
}

input UpdateManyMembershipsInput {
  """Filter used to find fields to update"""
  filter: MembershipUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateMembership!
}

input UpdateManyOrdersInput {
  """Filter used to find fields to update"""
  filter: OrderUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateOrder!
}

input UpdateManyPriceCategoriesInput {
  """Filter used to find fields to update"""
  filter: PriceCategoryUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePriceCategory!
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

input UpdateManyRowsInput {
  """Filter used to find fields to update"""
  filter: RowUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateRow!
}

input UpdateManySeatsInput {
  """Filter used to find fields to update"""
  filter: SeatUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateSeat!
}

input UpdateManySectionsInput {
  """Filter used to find fields to update"""
  filter: SectionUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateSection!
}

input UpdateManyTemplateDiscountsInput {
  """Filter used to find fields to update"""
  filter: TemplateDiscountUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateTemplateDiscount!
}

input UpdateManyTemplatesInput {
  """Filter used to find fields to update"""
  filter: TemplateUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateTemplate!
}

input UpdateManyTicketsInput {
  """Filter used to find fields to update"""
  filter: TicketUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateTicket!
}

input UpdateManyUserBenefitsInput {
  """Filter used to find fields to update"""
  filter: UserBenefitUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateUserBenefit!
}

input UpdateManyUsersInput {
  """Filter used to find fields to update"""
  filter: UserUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateUser!
}

input UpdateManyVenuesInput {
  """Filter used to find fields to update"""
  filter: VenueUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateVenue!
}

input UpdateMembership {
  expiryDate: DateTime
  membershipTypeId: ID
  points: Float
  userId: ID
}

input UpdateMembershipType {
  description: String
  name: String
  pointsPerTicket: Float
  price: Float
}

input UpdateOneBenefitInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateBenefit!
}

input UpdateOneBenefitSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: BenefitSubscriptionFilter!
}

input UpdateOneBusinessInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateBusiness!
}

input UpdateOneBusinessSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: BusinessSubscriptionFilter!
}

input UpdateOneBusinessUserInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateBusinessUser!
}

input UpdateOneBusinessUserSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: BusinessUserSubscriptionFilter!
}

input UpdateOneDiscountInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateDiscount!
}

input UpdateOneDiscountSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: DiscountSubscriptionFilter!
}

input UpdateOneEventInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateEvent!
}

input UpdateOneEventSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: EventSubscriptionFilter!
}

input UpdateOneMembershipInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateMembership!
}

input UpdateOneMembershipSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: MembershipSubscriptionFilter!
}

input UpdateOneMembershipTypeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateMembershipType!
}

input UpdateOneMembershipTypeSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: MembershipTypeSubscriptionFilter!
}

input UpdateOneOrderInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateOrder!
}

input UpdateOneOrderSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: OrderSubscriptionFilter!
}

input UpdateOnePriceCategoryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePriceCategory!
}

input UpdateOnePriceCategorySubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: PriceCategorySubscriptionFilter!
}

input UpdateOneRowInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateRow!
}

input UpdateOneRowSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: RowSubscriptionFilter!
}

input UpdateOneSeatInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateSeat!
}

input UpdateOneSeatSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: SeatSubscriptionFilter!
}

input UpdateOneSectionInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateSection!
}

input UpdateOneSectionSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: SectionSubscriptionFilter!
}

input UpdateOneTemplateDiscountInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateTemplateDiscount!
}

input UpdateOneTemplateDiscountSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: TemplateDiscountSubscriptionFilter!
}

input UpdateOneTemplateInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateTemplate!
}

input UpdateOneTemplateSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: TemplateSubscriptionFilter!
}

input UpdateOneTicketInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateTicket!
}

input UpdateOneTicketSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: TicketSubscriptionFilter!
}

input UpdateOneUserBenefitInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateUserBenefit!
}

input UpdateOneUserBenefitSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: UserBenefitSubscriptionFilter!
}

input UpdateOneUserInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateUser!
}

input UpdateOneUserSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: UserSubscriptionFilter!
}

input UpdateOneVenueInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateVenue!
}

input UpdateOneVenueSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: VenueSubscriptionFilter!
}

input UpdateOrder {
  total: Float
  userId: ID
}

input UpdatePassword {
  password: String!
  userId: ID!
}

input UpdatePriceCategory {
  endDate: DateTime
  id: ID
  name: String
  price: Float
  sectionId: ID
  startDate: DateTime
  templateId: ID!
}

input UpdateRow {
  created: DateTime
  id: ID
  name: String
  updated: DateTime
}

input UpdateSeat {
  created: DateTime
  id: ID
  name: String
  updated: DateTime
}

input UpdateSection {
  capacity: Float
  created: DateTime
  id: ID
  name: String
  updated: DateTime
}

input UpdateTemplate {
  category: Category
  description: String
  discount: [String!]
  id: ID!
  language: Language
  length: Float
  name: String
  posterUrl: String
  priceCategory: [UpdatePriceCategory!]
  subtitles: Language
  type: Type
  venueId: ID
}

input UpdateTemplateDiscount {
  created: DateTime
}

input UpdateTicket {
  discountId: ID
  eventId: ID
  price: Float
  rowId: ID
  seatId: ID
  sectionId: ID
  userId: ID
  validated: DateTime
}

input UpdateUser {
  avatarUrl: String
  birthDate: DateTime
  defaultBusinessId: ID
  deleted: DateTime
  email: String
  firstName: String
  lastName: String
  placeOfResidence: String
}

input UpdateUserBenefit {
  created: DateTime
}

input UpdateVenue {
  buildingNumber: String
  capacity: Float
  city: String
  id: ID!
  name: String
  sections: [UpdateVenueSection!]
  street: String
}

input UpdateVenueSection {
  capacity: Float!
  id: ID
  name: String!
  venueId: ID!
}

type User {
  avatarUrl: String
  birthDate: DateTime!
  created: DateTime!
  defaultBusiness: Business
  deleted: DateTime
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
  placeOfResidence: String
  updated: DateTime!
}

type UserBenefit {
  benefit: Benefit!
  business: Business!
  created: DateTime!
  user: User!
}

type UserBenefitConnection {
  """Array of nodes."""
  nodes: [UserBenefit!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

input UserBenefitDeleteFilter {
  and: [UserBenefitDeleteFilter!]
  benefitId: StringFieldComparison
  businessId: StringFieldComparison
  created: DateFieldComparison
  or: [UserBenefitDeleteFilter!]
  userId: StringFieldComparison
}

type UserBenefitDeleteResponse {
  created: DateTime
}

input UserBenefitFilter {
  and: [UserBenefitFilter!]
  benefit: UserBenefitFilterBenefitFilter
  benefitId: StringFieldComparison
  business: UserBenefitFilterBusinessFilter
  businessId: StringFieldComparison
  created: DateFieldComparison
  or: [UserBenefitFilter!]
  user: UserBenefitFilterUserFilter
  userId: StringFieldComparison
}

input UserBenefitFilterBenefitFilter {
  and: [UserBenefitFilterBenefitFilter!]
  businessId: StringFieldComparison
  created: DateFieldComparison
  expiryDate: DateFieldComparison
  id: IDFilterComparison
  membershipTypeId: StringFieldComparison
  name: StringFieldComparison
  or: [UserBenefitFilterBenefitFilter!]
  points: NumberFieldComparison
  updated: DateFieldComparison
}

input UserBenefitFilterBusinessFilter {
  and: [UserBenefitFilterBusinessFilter!]
  created: DateFieldComparison
  currency: CurrencyFilterComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [UserBenefitFilterBusinessFilter!]
  updated: DateFieldComparison
}

input UserBenefitFilterUserFilter {
  and: [UserBenefitFilterUserFilter!]
  avatarUrl: StringFieldComparison
  birthDate: DateFieldComparison
  created: DateFieldComparison
  defaultBusinessId: StringFieldComparison
  deleted: DateFieldComparison
  email: StringFieldComparison
  firstName: StringFieldComparison
  id: IDFilterComparison
  lastName: StringFieldComparison
  or: [UserBenefitFilterUserFilter!]
  placeOfResidence: StringFieldComparison
  updated: DateFieldComparison
}

input UserBenefitSort {
  direction: SortDirection!
  field: UserBenefitSortFields!
  nulls: SortNulls
}

enum UserBenefitSortFields {
  benefitId
  businessId
  created
  userId
}

input UserBenefitSubscriptionFilter {
  and: [UserBenefitSubscriptionFilter!]
  benefitId: StringFieldComparison
  businessId: StringFieldComparison
  created: DateFieldComparison
  or: [UserBenefitSubscriptionFilter!]
  userId: StringFieldComparison
}

input UserBenefitUpdateFilter {
  and: [UserBenefitUpdateFilter!]
  benefitId: StringFieldComparison
  businessId: StringFieldComparison
  created: DateFieldComparison
  or: [UserBenefitUpdateFilter!]
  userId: StringFieldComparison
}

type UserBenefits {
  available: [Benefit!]!
  membership: Boolean!
  membershipPoints: Float!
  unavailable: [Benefit!]!
  used: [Benefit!]!
}

type UserConnection {
  """Array of nodes."""
  nodes: [User!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

input UserDeleteFilter {
  and: [UserDeleteFilter!]
  avatarUrl: StringFieldComparison
  birthDate: DateFieldComparison
  created: DateFieldComparison
  defaultBusinessId: StringFieldComparison
  deleted: DateFieldComparison
  email: StringFieldComparison
  firstName: StringFieldComparison
  id: IDFilterComparison
  lastName: StringFieldComparison
  or: [UserDeleteFilter!]
  placeOfResidence: StringFieldComparison
  updated: DateFieldComparison
}

type UserDeleteResponse {
  avatarUrl: String
  birthDate: DateTime
  created: DateTime
  deleted: DateTime
  email: String
  firstName: String
  id: ID
  lastName: String
  placeOfResidence: String
  updated: DateTime
}

input UserFilter {
  and: [UserFilter!]
  avatarUrl: StringFieldComparison
  birthDate: DateFieldComparison
  created: DateFieldComparison
  defaultBusiness: UserFilterBusinessFilter
  defaultBusinessId: StringFieldComparison
  deleted: DateFieldComparison
  email: StringFieldComparison
  firstName: StringFieldComparison
  id: IDFilterComparison
  lastName: StringFieldComparison
  or: [UserFilter!]
  placeOfResidence: StringFieldComparison
  updated: DateFieldComparison
}

input UserFilterBusinessFilter {
  and: [UserFilterBusinessFilter!]
  created: DateFieldComparison
  currency: CurrencyFilterComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [UserFilterBusinessFilter!]
  updated: DateFieldComparison
}

type UserProfile {
  avatarUrl: String
  benefitsUsed: Float!
  birthDate: DateTime!
  email: String!
  eventsVisited: Float!
  firstName: String!
  id: ID!
  lastName: String!
  membershipPoints: Float!
  membershipType: MembershipType
  placeOfResidence: String
}

input UserSort {
  direction: SortDirection!
  field: UserSortFields!
  nulls: SortNulls
}

enum UserSortFields {
  avatarUrl
  birthDate
  created
  defaultBusinessId
  deleted
  email
  firstName
  id
  lastName
  placeOfResidence
  updated
}

input UserSubscriptionFilter {
  and: [UserSubscriptionFilter!]
  avatarUrl: StringFieldComparison
  birthDate: DateFieldComparison
  created: DateFieldComparison
  defaultBusinessId: StringFieldComparison
  deleted: DateFieldComparison
  email: StringFieldComparison
  firstName: StringFieldComparison
  id: IDFilterComparison
  lastName: StringFieldComparison
  or: [UserSubscriptionFilter!]
  placeOfResidence: StringFieldComparison
  updated: DateFieldComparison
}

type UserTickets {
  id: ID!
  ticketSet: [Ticket!]!
}

input UserUpdateFilter {
  and: [UserUpdateFilter!]
  avatarUrl: StringFieldComparison
  birthDate: DateFieldComparison
  created: DateFieldComparison
  defaultBusinessId: StringFieldComparison
  deleted: DateFieldComparison
  email: StringFieldComparison
  firstName: StringFieldComparison
  id: IDFilterComparison
  lastName: StringFieldComparison
  or: [UserUpdateFilter!]
  placeOfResidence: StringFieldComparison
  updated: DateFieldComparison
}

type Venue {
  buildingNumber: String!
  business: Business!
  capacity: Float!
  city: String!
  created: DateTime!
  hasSeats: Boolean!
  id: ID!
  name: String!
  seatMap: JSON
  street: String!
  updated: DateTime!
}

type VenueConnection {
  """Array of nodes."""
  nodes: [Venue!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

input VenueDeleteFilter {
  and: [VenueDeleteFilter!]
  buildingNumber: StringFieldComparison
  capacity: NumberFieldComparison
  city: StringFieldComparison
  created: DateFieldComparison
  hasSeats: BooleanFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [VenueDeleteFilter!]
  street: StringFieldComparison
  updated: DateFieldComparison
}

type VenueDeleteResponse {
  buildingNumber: String
  capacity: Float
  city: String
  created: DateTime
  hasSeats: Boolean
  id: ID
  name: String
  seatMap: JSON
  street: String
  updated: DateTime
}

input VenueFilter {
  and: [VenueFilter!]
  buildingNumber: StringFieldComparison
  business: VenueFilterBusinessFilter
  capacity: NumberFieldComparison
  city: StringFieldComparison
  created: DateFieldComparison
  hasSeats: BooleanFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [VenueFilter!]
  street: StringFieldComparison
  updated: DateFieldComparison
}

input VenueFilterBusinessFilter {
  and: [VenueFilterBusinessFilter!]
  created: DateFieldComparison
  currency: CurrencyFilterComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [VenueFilterBusinessFilter!]
  updated: DateFieldComparison
}

input VenueSection {
  capacity: Float!
  name: String!
}

input VenueSort {
  direction: SortDirection!
  field: VenueSortFields!
  nulls: SortNulls
}

enum VenueSortFields {
  buildingNumber
  capacity
  city
  created
  hasSeats
  id
  name
  street
  updated
}

input VenueSubscriptionFilter {
  and: [VenueSubscriptionFilter!]
  buildingNumber: StringFieldComparison
  capacity: NumberFieldComparison
  city: StringFieldComparison
  created: DateFieldComparison
  hasSeats: BooleanFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [VenueSubscriptionFilter!]
  street: StringFieldComparison
  updated: DateFieldComparison
}

input VenueUpdateFilter {
  and: [VenueUpdateFilter!]
  buildingNumber: StringFieldComparison
  capacity: NumberFieldComparison
  city: StringFieldComparison
  created: DateFieldComparison
  hasSeats: BooleanFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [VenueUpdateFilter!]
  street: StringFieldComparison
  updated: DateFieldComparison
}